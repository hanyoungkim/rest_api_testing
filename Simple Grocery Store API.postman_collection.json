{
	"info": {
		"_postman_id": "fefe7c6c-b628-4ff1-8d53-d3fcea602794",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23381065"
	},
	"item": [
		{
			"name": "Register API client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"error message should contain 'API client already registered'\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.contain(\"API client already registered\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"clientName\": \"Postman on Valentin's computer\",\n   \"clientEmail\": \"valentin_tes112asdadsasa1@example.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    console.log(\"TEST consol log 02\");\r",
							"});\r",
							"\r",
							"const numbers = [1,2,3,4,5,6,7];\r",
							"\r",
							"// Find something in array and use it later for assertion\r",
							"let foundItem = numbers.find((item) =>  item === 5);\r",
							"if (foundItem) {\r",
							"    console.log('Found it!');\r",
							"}\r",
							"\r",
							"const persons = [\r",
							"    {\r",
							"        name: 'Jake',\r",
							"        email: 'khy2413@naver.com'\r",
							"    },\r",
							"    {\r",
							"        name: 'Lucas',\r",
							"        email: 'rachii0821@gmail.com'\r",
							"    }\r",
							"]\r",
							"\r",
							"// useful syxtax\r",
							"const personFound1 = persons.find((person) => person.name === 'Jake');\r",
							"if (personFound1) {\r",
							"    console.log(personFound1.email);\r",
							"}\r",
							"\r",
							"\r",
							"// Use parameter for const variable\r",
							"const personFound2 = (name,email) => persons.find((person) => person.name === name && person.email === email);\r",
							"if (personFound2('Jake','khy2413@naver.com')) {\r",
							"    console.log('Found it!');\r",
							"    console.log(personFound2('Jake','khy2413@naver.com').email);\r",
							"    console.log(personFound2('Jake','khy2413@naver.com'));\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"TEST consol log 02\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('At least one available product exists', () => {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.be.an('array');\r",
							"    pm.expect(response.length).to.be.above(0);\r",
							"\r",
							"    const product = response[0];\r",
							"    pm.expect(product).to.be.an('object');\r",
							"    pm.expect(product).to.haveOwnProperty('id');\r",
							"    pm.expect(product.id).to.be.a('number');\r",
							"    pm.expect(product).to.haveOwnProperty('inStock');\r",
							"    pm.expect(product.inStock).to.be.true;\r",
							"\r",
							"    // Set Collection Variable\r",
							"    // Only happens if the above condition tests are passed\r",
							"    pm.collectionVariables.set('productId', response[0].id);\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"pm.test('TEST', () => {\r",
							"    const response = pm.response.json();\r",
							"    let isFound = false;\r",
							"\r",
							"    for(let item of response){\r",
							"        if (item.id == 4643) {\r",
							"            console.log('Foundit!');\r",
							"            console.log(item)\r",
							"            isFound = true\r",
							"        }\r",
							"    }\r",
							"    pm.expect(isFound).to.be.true;\r",
							"\r",
							"    // const foundItem = response.find((item) => item.id === 4643);\r",
							"    // if (foundItem) {\r",
							"    //     console.log(foundItem.category, foundItem.id);\r",
							"    //     isFound = true\r",
							"    //     }\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products?results=20",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "fresh-produce",
							"disabled": true
						},
						{
							"key": "results",
							"value": "20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(pm.collectionVariables.get(\"cartId\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/:productId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						":productId"
					],
					"variable": [
						{
							"key": "productId",
							"value": "{{productId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('Response has valid cartId', () => {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).haveOwnProperty('cartId');\r",
							"    pm.expect(response.cartId).to.be.a('String');  \r",
							"    pm.collectionVariables.set('cartId', response.cartId);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cart items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add item to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"response has a valid itemId\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response.created).to.be.true;\r",
							"    pm.expect(response.itemId).to.be.a('number');\r",
							"    pm.collectionVariables.set('lastAddedItemId', response.itemId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"productId\": 4643\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						""
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// Try to use variable getter\r",
							"pm.variables.get('key');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomeNumber(maxValue) {\r",
							"    return Math.floor(Math.random() * maxValue);\r",
							"}\r",
							"\r",
							"pm.collectionVariables.set('randomQuantity', getRandomeNumber(14));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"quantity\": {{randomQuantity}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "itemId",
							"value": "{{lastAddedItemId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace product in cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productId\": {{productId}},\n    \"quantity\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "itemId",
							"value": "{{lastAddedItemId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete item in cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "itemId",
							"value": "{{lastAddedItemId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add item to cart 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"response has a valid itemId\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response.created).to.be.true;\r",
							"    pm.expect(response.itemId).to.be.a('number');\r",
							"    pm.collectionVariables.set('lastAddedItemId', response.itemId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"productId\": 4643\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/:cartId/items/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						""
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"response has a valid orderId\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response.created).to.be.true;\r",
							"    pm.expect(response.orderId).to.be.a('string');\r",
							"    pm.collectionVariables.set('orderId', response.orderId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"cartId\": \"{{cartId}}\",\n    \"customerName\": \"{{$randomFullName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Created order is in the order list', () => {\r",
							"    const response = pm.response.json();\r",
							"    let isOrderIdInResponse = false;\r",
							"\r",
							"    let order = response.find((order) => order.id === pm.collectionVariables.get('orderId'));\r",
							"    pm.expect(order).to.be.an('object');\r",
							"    // pm.expect(response.find((order) => order.id === pm.collectionVariables.get('orderId'))).to.be.an('object');\r",
							"\r",
							"    if (order) {\r",
							"        console.log('Found it!');\r",
							"        isOrderIdInResponse = true;\r",
							"    }\r",
							"    else {\r",
							"        console.log(order.id);\r",
							"    }\r",
							"\r",
							"    // response.forEach((order) => {\r",
							"    //     if (order.id === pm.collectionVariables.get('orderId')){\r",
							"    //         console.log('Found it!');\r",
							"    //         isOrderIdInResponse = true;\r",
							"    //     }\r",
							"    // });\r",
							"\r",
							"    pm.expect(isOrderIdInResponse).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"comment\": \"Pickup at 2PM.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single order (Before Delete)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single order (After Delete)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message contains the deleted order id\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.haveOwnProperty('error');\r",
							"    pm.expect(response.error).to.contain(pm.collectionVariables.get('orderId'));\r",
							"    pm.expect(response.error).to.include(pm.collectionVariables.get('orderId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Use Chai assertion library",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const chai = require('chai');\r",
							"\r",
							"pm.test('respose status code should be 200', () => {\r",
							"    chai.assert.equal(pm.response.code,200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "TEST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const chai = require('chai');\r",
							"\r",
							"pm.test('respose status code should be 200', () => {\r",
							"    chai.assert.equal(pm.response.code,200);\r",
							"    console.log(\"TEST consol log 01\");\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Environment Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Environment Variable should be Undefined\", () => {\r",
							"    const envVariable = pm.variables.get(\"envTest\");\r",
							"    pm.expect(envVariable).to.be.undefined;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "7c1110ab1ed8984798aac02717b7ee73d8f9f991cc773e8d8aa85e1250dd0f26",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": "",
			"type": "string"
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "lastAddedItemId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "randomQuantity",
			"value": ""
		}
	]
}